{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","home","onClick","toggleMode","role","htmlFor","toggleMode1","toggleMode2","Textform","saveToHistory","currentText","setHistory","history","clearRedoStack","setRedoStack","text","setText","useState","redoStack","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","handleUpClick","newText","toUpperCase","showAlert","handleDownClick","toLowerCase","handleresetClick","handleUndo","length","lastState","slice","disabled","handleRedo","redoState","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpace","split","join","trim","replace","defaultProps","Alert","alert","msg","App","setMode","setbackgroundColor","setAlert","message","setTimeout","body","setInterval","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.166ddd70.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.home}</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/about\">About</a>\r\n          </li> */}\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n   <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode}   role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n   <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n   </div>\r\n  <div className={`form-check form-switch text-${props.mode === 'light' ?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode1} role=\"switch\"  id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable purple mode</label>\r\n</div>\r\n<div className={`form-check form-switch text-${props.mode === 'light' ?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode2} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable green mode</label>\r\n</div>\r\n   </div>\r\n      </div>\r\n  </nav> \r\n    </div>\r\n  )\r\n}\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,\r\n                    home:PropTypes.string.isRequired,}\r\n\r\nNavbar.defaultProps = {\r\n    // title:'set title here ',\r\n    home: 'home'\r\n}                   ","import React ,{useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n  const handleUpClick = ()=>{\r\n    // console.log(\"uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    // let MewText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\",\"Success\");\r\n    // setText(MewText);\r\n  }\r\n  const handleCopy =() =>{\r\n      let text = document.getElementById(\"mybox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Texr are copied\",\"Success\");\r\n  }\r\n\r\n  const handleExtraSpace =()=>{\r\n   let newText = text.split(/[ ]+/);\r\n   setText(newText.join(\" \"));\r\n   props.showAlert(\"Extra spaces are removed\",\"Success\");\r\n\r\n  }\r\n  const handleresetClick =()=>{\r\n    let newText = '';\r\n    setText(newText);\r\n    props.showAlert(\"text is reset\",\"Success\");\r\n  }\r\n  const handleDownClick =() =>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase\",\"Success\");\r\n  }\r\n  const handleOnChange =(event)=>{\r\n    // console.log(\"hello\");\r\n    saveToHistory(text); // Save current state before changing\r\n    clearRedoStack();   \r\n    setText(event.target.value);\r\n  }\r\n  const saveToHistory = (currentText) => {\r\n    setHistory([...history, currentText]);\r\n  };\r\n\r\n  // Clear the redo stack\r\n  const clearRedoStack = () => {\r\n    setRedoStack([]);\r\n  };\r\n\r\n  // Handle Undo operation\r\n  const handleUndo = () => {\r\n    if (history.length === 0) return; \r\n    const lastState = history[history.length - 1];\r\n    setRedoStack([text, ...redoStack]);\r\n    setText(lastState);\r\n    setHistory(history.slice(0, -1));\r\n  };\r\n\r\n  // Handle Redo operation\r\n  const handleRedo = () => {\r\n    if (redoStack.length === 0) return; // No action to redo\r\n\r\n    // Get the last state from redo stack\r\n    const redoState = redoStack[0];\r\n    \r\n    // Move the current state to history\r\n    saveToHistory(text);\r\n\r\n    // Update the text and redo stack\r\n    setText(redoState);\r\n    setRedoStack(redoStack.slice(1));\r\n  };\r\n  const [text, setText] = useState(\"enter text here\");\r\n  const [history, setHistory] = useState(\"\");\r\n  const [redoStack, setRedoStack] = useState(\"\");\r\n  return (\r\n   <>\r\n<div className=\"container\" style={{color:props.mode === 'dark'?'white':'black'}}>\r\n\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n  <label htmlFor=\"textarea\" className=\"form-label\"></label>\r\n  <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"mybox\" rows=\"7\"  style={{\r\n          backgroundColor:props.backgroundColor,\r\n          color:props.mode === 'dark' ? 'white' : 'black',\r\n        }}\r\n        ></textarea>\r\n </div>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleDownClick}>Convert to lowercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleresetClick}>Reset</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleUndo}  disabled={history.length === 0}>Undo</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleRedo} disabled={redoStack.length === 0}>Redo</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove extraspace</button>\r\n</div>\r\n<div className=\"container my-3\" style={{color:props.mode === 'dark'?'white':'black'}}>\r\n <h1>your summary</h1>\r\n <p>Words-{text.trim() ===\"\"? 0 :text.trim().split(/\\s+/).length} Length-{text.replace(/\\s+/g,'').length}</p>\r\n <p>Speed-{0.008 * text.split(\" \").length}</p>\r\n <h2>Preview</h2>\r\n <p>{text.length>0?text:\"Enter your text to preview it here\"}</p>\r\n \r\n</div>\r\n  </>\r\n  )\r\n}\r\n// text.trim() ===\"\"? 0 :text.trim().split(/\\s+/).length\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  return (\r\n     props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n  <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport React, { useState } from 'react';\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\n\nfunction App() {\n  const[mode,setMode] =useState('light');\n  const[backgroundColor,setbackgroundColor] = useState('light');\n  const[alert,setAlert] =useState(null);\n  const showAlert = (message,type) => {\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n    setAlert(null);\n    },1500);\n   }\n   const toggleMode2 =()=>{\n    if(mode === 'light'){\n     setMode('dark');\n     document.body.style.backgroundColor = \"green\";\n    setbackgroundColor('green');\n     showAlert(\"Green mode is enabled\", \"Success\");\n     document.title = 'Reacttuto -green mode';\n     setInterval(() =>{\n      document.title = 'Reacttuto -dark mode';\n     },2000);\n     setInterval(() =>{\n      document.title = 'Reacttuto -Amazing website mode';\n     },1100);\n    }\n    else{\n     setMode('light');\n     document.body.style.backgroundColor = \"white\";\n     setbackgroundColor('white');\n     showAlert(\"Light mode is enabled\", \"Success\");\n\n    }\n  }\n const toggleMode1 =()=>{\n   if(mode ==='light' ){\n    setMode('dark');\n    document.body.style.backgroundColor = \"purple\";\n    setbackgroundColor('purple');\n    showAlert(\"Purple mode is enabled\", \"Success\");\n    document.title = 'Reacttuto -purple mode';\n   }\n   else{\n    setMode('light');\n    document.body.style.backgroundColor = \"white\";\n    setbackgroundColor('white');\n    showAlert(\"Light mode is enabled\", \"Success\");\n    document.title = 'Reacttuto -light mode';\n   }\n }\n  const toggleMode =() =>{\n      if(mode === 'light'){\n        setMode('dark');\n        document.body.style.backgroundColor = \"#052a60\";\n        setbackgroundColor('#052a60');\n        showAlert(\"Dark mode is enabaled\",\"Success\");\n        document.title = 'Reacttuto -dark mode';\n      }\n      else{\n        setMode('light');\n        document.body.style.backgroundColor = \"white\";\n        setbackgroundColor('white');\n        showAlert(\"Light mode is enabaled\",\"Success\");\n        document.title = 'Reacttuto -light mode';\n      }\n    }\n    return (\n    <>\n {/* <BrowserRouter> */}\n      <Navbar title=\"TextUtils\" mode ={mode} toggleMode={toggleMode} toggleMode1={toggleMode1} toggleMode2={toggleMode2} backgroundColor={backgroundColor}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">   \n        {/* <Routes> */}\n          {/* <Route path=\"/\" element={ */}\n            <Textform heading = \"Enter your text to analyse\" mode ={mode} showAlert = {showAlert} backgroundColor={backgroundColor}/>\n            {/* } /> */}\n          {/* <Route path=\"about\" element={<About />} />\n        </Routes> */}\n      </div>\n      {/* </BrowserRouter> */}\n \n </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}